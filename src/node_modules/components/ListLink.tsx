import React, { forwardRef, ForwardRefExoticComponent, PropsWithoutRef, RefAttributes } from 'react';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom';
import { Omit } from '@material-ui/types';

interface ListItemLinkProps {
  icon?: React.ReactElement;
  primary: string;
  to: string;
}

export function ListItemLink(props: ListItemLinkProps): JSX.Element {
  const { icon, primary, to } = props;

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const renderRef = (): ForwardRefExoticComponent<PropsWithoutRef<Omit<RouterLinkProps, 'to'>> & RefAttributes<any>> =>
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    forwardRef<any, Omit<RouterLinkProps, 'to'>>(function MaterialRouterLink(itemProps, ref) {
      return <RouterLink to={to} ref={ref} {...itemProps} />;
    });

  // renderRef.displayName = 'RouterLink';
  const renderLink = React.useMemo(renderRef, [to]);
  // const renderLink = React.useMemo(
  //
  //   () =>
  //     forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => <RouterLink to={to} ref={ref} {...itemProps} />),
  //   [to],
  // );

  return (
    <li>
      <ListItem button component={renderLink}>
        {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}
        <ListItemText primary={primary} />
      </ListItem>
    </li>
  );
}
