import * as React from 'react';
import { Dispatch, SetStateAction, useEffect, useState } from 'react';
import {
  AppointmentModel,
  Appointments as AppointmentsBase,
  ChangeSet,
  EditingState,
  IntegratedEditing,
  SchedulerDateTime,
  ViewState,
} from '@devexpress/dx-react-scheduler';
import Container from '@material-ui/core/Container';
import {
  AllDayPanel,
  AppointmentForm,
  Appointments,
  AppointmentTooltip,
  ConfirmationDialog,
  CurrentTimeIndicator,
  DateNavigator,
  DayView,
  DragDropProvider,
  MonthView,
  Scheduler,
  TodayButton,
  Toolbar,
  ViewSwitcher,
  WeekView,
} from '@devexpress/dx-react-scheduler-material-ui';
import { appointments } from 'routes/Calendar/data';

export type CalState = {
  count: number;
  data: AppointmentModel[];
  currentDate: SchedulerDateTime;
};

export type CallProps = {};

// export type CallAction = {
//   type: 'increment' | 'decrement';
//   payload?: SchedulerDateTime | AppointmentModel[];
// };

//
// function reducer(state: CalState, action: CallAction) {
//   switch (action.type) {
//     case 'increment':
//       return { count: state.count + 1 };
//     case 'decrement':
//       return { count: state.count - 1 };
//     default:
//       throw new Error();
//   }
// }

function commitChanges(
  { added, changed, deleted }: ChangeSet,
  data: AppointmentModel[],
  cb: Dispatch<SetStateAction<AppointmentModel[]>>,
): void {
  console.dir({ added, changed, deleted });
  if (added) {
    const { id }: AppointmentModel = data[data.length - 1];

    const startingAddedId = id !== undefined ? parseInt(`${id}`, 10) + 1 : 0;
    cb([...data, { id: startingAddedId, ...(added as AppointmentModel) }]);
  }
  if (changed) {
    cb(
      data.map((appointment) => {
        const { id }: AppointmentModel = appointment;
        const changedItem = id !== undefined ? changed[parseInt(`${id}`, 10)] : undefined;
        return changedItem !== undefined ? { ...appointment, ...changedItem } : appointment;
      }),
    );
  }
  if (deleted !== undefined) {
    cb(data.filter((appointment) => appointment.id !== deleted));
  }
}

const dragDisableIds = new Set([3, 8, 10, 12]);
const allowDrag = ({ id }: AppointmentModel): boolean => id === undefined || !dragDisableIds.has(parseInt(`${id}`, 10));
const appointmentComponent = (
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  props: AppointmentsBase.AppointmentProps & { className?: string; style?: React.CSSProperties; [x: string]: any },
): JSX.Element => {
  if (allowDrag(props.data)) {
    return <Appointments.Appointment {...props} />;
  }
  return <Appointments.Appointment {...props} style={{ ...props.style, cursor: 'not-allowed' }} />;
};

export function Calendar(): JSX.Element {
  const [data, setData] = useState<AppointmentModel[]>([]);
  const [currentDate, setCurrentDate] = useState<SchedulerDateTime>(new Date());

  useEffect(() => {
    Promise.resolve(appointments).then((appointments) =>
      setData(
        appointments.map((app, index) => ({
          id: index,
          ...app,
        })),
      ),
    );

    // return (): void => { console.log('useEffect stop'); };
  }, []);

  const currentDateChange = (currentDate: Date): void => {
    setCurrentDate(currentDate);
  };

  return (
    <Container maxWidth="lg">
      <Scheduler data={data} height={660}>
        <ViewState currentDate={currentDate} onCurrentDateChange={currentDateChange} defaultCurrentViewName="Week" />
        <WeekView startDayHour={9} endDayHour={19} />
        <WeekView name="work-week" displayName="Work Week" excludedDays={[0, 6]} startDayHour={9} endDayHour={19} />
        <MonthView />
        <DayView startDayHour={9} endDayHour={19} />
        <Toolbar />
        <DateNavigator />
        <ViewSwitcher />
        <TodayButton />
        <Appointments appointmentComponent={appointmentComponent} />
        <AllDayPanel />
        <EditingState onCommitChanges={(changes: ChangeSet): void => commitChanges(changes, data, setData)} />
        <IntegratedEditing />
        <AppointmentTooltip showCloseButton showOpenButton showDeleteButton />
        <AppointmentForm />

        <ConfirmationDialog />
        <DragDropProvider allowDrag={allowDrag} />
        <CurrentTimeIndicator shadePreviousCells={false} shadePreviousAppointments={true} updateInterval={60000} />
      </Scheduler>
    </Container>
  );
}

export default Calendar;
